count = gets.chomp.to_i # 買いたいたこ焼きの個数

pack_count = count / 10  # パックで買ったほうが確実にお得な個数
reserve_count = count % 10 # パック買いでお得になるか怪しい残ったたこ焼きの個数

# 残ったたこ焼きが7個未満なら通常買いがお得
if reserve_count.between?(0, 6)
  puts pack_count * 100 + reserve_count * 15

# それ以外は(7, 8, 9個)の場合はパックで買ったほうがお得
else 
  puts (pakc_count + 1) * 100
end

#
# Q1.なぜto_iメソッドが必要なのか?
#
# A1. 数値演算を行うときはInteger型でないといけないから
#
# 例) "1" + 1 -> x   左側の"1"はString型(文字列)
#
#     "1".to_i + 1 -> o  左側の"1"をto_iメソッドを用いてInteger型(整数型に変換している)
#
#
# gets => 標準入力の取得
# chomp => 改行コード('\n')の削除、
# 例) 
#    "aaaaa\n" <- これをchompすると
#    "aaaaa" <- になる
#
# to_i => Integer(整数型)に変換してくれるメソッド(関数)
#
# 
# ヒント:
#     2 = 5/2   <= '/'では商が出力される
#     1 = 5%2   <= '%'では余りが出力される
#
#     2.5 = 5/2.0 <= 片方がFloat(浮動少数型)なので出力がFloat型になる
#
#     例) 
#       10割る3は3余り1
#       10 / 3 == 3
#       10 % 3 == 1
#
#       7割る4は1あまり3
#       7 % 4 == 3
#       7 / 4 == 1
#
#       8 / 4 == 2
# 
#
# ヒント2:
#   * 6個買いたい場合 
#         通常 -> 6 * 15 = 90円
#   パック買い -> 100円
#
#   -> パック買いのほうが10円損
#
#   * 7個買いたい場合 
#         通常 -> 7 * 15 = 105円
#   パック買い -> 100円
#
#   -> パック買いのほうが5円得
#
#   * 8個買いたい場合 
#         通常 -> 8 * 15 = 120円
#   パック買い -> 100円
#
#   -> パック買いのほうが20円得
#
